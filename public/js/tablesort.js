/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/tablesort.js":
/*!***********************************!*\
  !*** ./resources/js/tablesort.js ***!
  \***********************************/
/***/ (() => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\r\n * Sorts a HTML table.\r\n * \r\n * @param {HTMLTableElement} table The table to sort\r\n * @param {number} column The index of the column to sort\r\n * @param {boolean} asc Determines if the sorting will be in ascending\r\n */\nfunction sortTableByColumn(table, column) {\n  var asc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var dirModifier = asc ? 1 : -1;\n  var tBody = table.tBodies[0];\n  var rows = Array.from(tBody.querySelectorAll(\"tr\")); // Sort each row\n\n  var sortedRows = rows.sort(function (a, b) {\n    var aColText = a.querySelector(\"td:nth-child(\".concat(column + 1, \")\")).textContent.toLowerCase().trim();\n    var bColText = b.querySelector(\"td:nth-child(\".concat(column + 1, \")\")).textContent.toLowerCase().trim();\n    return aColText > bColText ? 1 * dirModifier : -1 * dirModifier;\n  }); // Remove all existing TRs from the table\n\n  while (tBody.firstChild) {\n    tBody.removeChild(tBody.firstChild);\n  } // Re-add the newly sorted rows\n\n\n  tBody.append.apply(tBody, _toConsumableArray(sortedRows)); // Remember how the column is currently sorted\n\n  table.querySelectorAll(\"th\").forEach(function (th) {\n    return th.classList.remove(\"th-sort-asc\", \"th-sort-desc\");\n  });\n  table.querySelector(\"th:nth-child(\".concat(column + 1, \")\")).classList.toggle(\"th-sort-asc\", asc);\n  table.querySelector(\"th:nth-child(\".concat(column + 1, \")\")).classList.toggle(\"th-sort-desc\", !asc);\n}\n\ndocument.querySelectorAll(\".table-sortable th\").forEach(function (headerCell) {\n  if (headerCell.id == \"no-sort\") {\n    return;\n  }\n\n  headerCell.addEventListener(\"click\", function () {\n    var tableElement = headerCell.parentElement.parentElement.parentElement;\n    var headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);\n    var currentIsAscending = headerCell.classList.contains(\"th-sort-asc\");\n    sortTableByColumn(tableElement, headerIndex, !currentIsAscending);\n  });\n}); //https://codepen.io/dcode-software/pen/zYGOrzK\n\nfunction searchTable() {\n  var searchInput = document.getElementById(\"search\");\n  var rows = document.querySelectorAll(\"tbody tr\");\n  console.log(rows);\n  searchInput.addEventListener(\"keyup\", function (event) {\n    var q = event.target.value.toLowerCase().trim();\n    rows.forEach(function (row) {\n      row.querySelector(\"td\").textContent.toLowerCase().trim().startsWith(q) ? row.style.display = \"table-row\" : row.style.display = \"none\";\n    });\n  });\n} // check if there is a search element before running the above function\n\n\nvar searchElement = document.getElementById(\"search\");\n\nif (searchElement != null) {\n  searchTable();\n} //https://github.com/akjasim/cb_js_filter-table/blob/master/index.html\n// allows filtering of animals by animal type\n\n\nfunction dropdownsearchTable() {\n  // get the dropdown element\n  var dropdownSearchInput = document.getElementById(\"dropdown-search\"); // store an array of all table rows\n\n  var rows = document.querySelectorAll(\"tbody tr\");\n  console.log(rows); // add a click event to the dropdown element\n\n  dropdownSearchInput.addEventListener(\"click\", function () {\n    // if the selected dropdown value is empty then show all rows\n    if (dropdownSearchInput.value == \"\") {\n      rows.forEach(function (row) {\n        row.style.display = \"table-row\";\n      });\n      return;\n    } // for each of the rows, get the columns and check the value of second column \"cols[1]\" (this is where the animal type is stored)\n    // if the animal type is the same as the selected animal type from the dropdown, then show the row, otherwise do not show the row\n\n\n    rows.forEach(function (row) {\n      var cols = row.querySelectorAll(\"td\");\n      cols[1].textContent.toLowerCase() == dropdownSearchInput.value ? row.style.display = \"table-row\" : row.style.display = \"none\";\n    });\n  });\n} // check if there is a search element before running the above function\n\n\nvar dropdownSearchElement = document.getElementById(\"dropdown-search\");\n\nif (dropdownSearchElement != null) {\n  dropdownsearchTable();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/tablesort.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/tablesort.js"]();
/******/ 	
/******/ })()
;